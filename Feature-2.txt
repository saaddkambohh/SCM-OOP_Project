#include <iostream>
#include <map>
#include <string>

using namespace std;

class RoomDetails {
private:
    string roomType;
    bool wifiAvailable;
    bool tvAvailable;
    string view;

public:
    // Constructor
    RoomDetails(const string& type, bool wifi, bool tv, const string& roomView) {
        roomType = type;
        wifiAvailable = wifi;
        tvAvailable = tv;
        view = roomView;
    }

    // Method to display room details
    void displayRoomDetails() {
        cout << "Room Type: " << roomType << endl;
        cout << "WiFi: " << (wifiAvailable ? "Available" : "Not Available") << endl;
        cout << "TV: " << (tvAvailable ? "Available" : "Not Available") << endl;
        cout << "View: " << view << endl;
    }
};

class UserAuthenticator {
private:
    map<string, string> users; // username -> password mapping
    map<string, string> userRoles; // username -> role mapping

public:
    // Constructor
    UserAuthenticator() {
        // Add some sample users and their passwords
        users["user1"] = "password1";
        users["user2"] = "password2";

        // Assign roles to users
        userRoles["user1"] = "admin";
        userRoles["user2"] = "user";
    }

    // Method to authenticate user
    bool authenticateUser(const string& username, const string& password) {
        map<string, string>::iterator it = users.find(username);
        if (it != users.end() && it->second == password) {
            cout << "User authenticated successfully!" << endl;
            return true;
        }
        cout << "Invalid username or password." << endl;
        return false;
    }

    // Method to check authorization and return role
    string authorizeUser(const string& username) {
        map<string, string>::iterator it = userRoles.find(username);
        if (it != userRoles.end()) {
            return it->second;
        }
        return "";
    }

    // Method to add a new user
    void addUser(const string& username, const string& password, const string& role) {
        users[username] = password;
        userRoles[username] = role;
        cout << "User added successfully!" << endl;
    }

    // Method to display room details
    void displayRoomDetails() {
        // Sample room details
        RoomDetails singleRoom("Single", true, true, "City View");
        RoomDetails doubleRoom("Double", true, true, "Garden View");
        RoomDetails suiteRoom("Suite", true, true, "Ocean View");

        cout << "Room Details:" << endl;
        cout << "1. Single Room" << endl;
        singleRoom.displayRoomDetails();
        cout << endl;

        cout << "2. Double Room" << endl;
        doubleRoom.displayRoomDetails();
        cout << endl;

        cout << "3. Suite Room" << endl;
        suiteRoom.displayRoomDetails();
        cout << endl;
    }
};

int main() {
    UserAuthenticator authenticator;

    int choice;
    string username, password, role;

    bool continueLoop = true;
    while (continueLoop) {
        cout << "Choose an option:" << endl;
        cout << "1. Add user" << endl;
        cout << "2. Login" << endl;
        cout << "3. View Room Details" << endl;
        cout << "4. Exit" << endl;
        cout << "Enter your choice: ";
        cin >> choice;

        switch(choice) {
            case 1:
                // Prompt for username
                cout << "Enter username: ";
                cin >> username;

                // Prompt for password
                cout << "Enter password: ";
                cin >> password;

                // Prompt for role
                cout << "Enter role (admin/user): ";
                cin >> role;

                // Add the user
                authenticator.addUser(username, password, role);
                break;

            case 2:
                // Prompt for username
                cout << "Enter username: ";
                cin >> username;

                // Prompt for password
                cout << "Enter password: ";
                cin >> password;

                // Authenticate the user
                if(authenticator.authenticateUser(username, password)) {
                    // Authorize the user
                    string userRole = authenticator.authorizeUser(username);
                    if (!userRole.empty()) {
                        cout << "User role: " << userRole << endl;
                    } else {
                        cout << "Failed to authorize user." << endl;
                    }
                }
                break;

            case 3:
                // Display room details
                authenticator.displayRoomDetails();
                break;

            case 4:
                continueLoop = false;
                break;

            default:
                cout << "Invalid choice. Please choose again." << endl;
                break;
        }
    }

    return 0;
}