#include <iostream>
#include <map>
#include <string>

using namespace std;

class UserAuthenticator {
private:
    map<string, string> users; // username -> password mapping
    map<string, string> userRoles; // username -> role mapping

public:
    // Constructor
    UserAuthenticator() {
        // Add some sample users and their passwords
        users["user1"] = "password1";
        users["user2"] = "password2";

        // Assign roles to users
        userRoles["user1"] = "admin";
        userRoles["user2"] = "user";
    }

    // Method to authenticate user
    bool authenticateUser(const string& username, const string& password) {
        map<string, string>::iterator it = users.find(username);
        if (it != users.end() && it->second == password) {
            cout << "User authenticated successfully!" << endl;
            return true;
        }
        cout << "Invalid username or password." << endl;
        return false;
    }

    // Method to check authorization and return role
    string authorizeUser(const string& username) {
        map<string, string>::iterator it = userRoles.find(username);
        if (it != userRoles.end()) {
            return it->second;
        }
        return "";
    }

    // Method to add a new user
    void addUser(const string& username, const string& password, const string& role) {
        users[username] = password;
        userRoles[username] = role;
        cout << "User added successfully!" << endl;
    }
};

int main() {
    UserAuthenticator authenticator;

    int choice;
    string username, password, role;

    cout << "Choose an option:" << endl;
    cout << "1. Add user" << endl;
    cout << "2. Login" << endl;
    cout << "Enter your choice: ";
    cin >> choice;

    switch(choice) {
        case 1:
            // Prompt for username
            cout << "Enter username: ";
            cin >> username;

            // Prompt for password
            cout << "Enter password: ";
            cin >> password;

            // Prompt for role
            cout << "Enter role (admin/user): ";
            cin >> role;

            // Add the user
            authenticator.addUser(username, password, role);
            break;

        case 2:
            // Prompt for username
            cout << "Enter username: ";
            cin >> username;

            // Prompt for password
            cout << "Enter password: ";
            cin >> password;

            // Authenticate the user
            if(authenticator.authenticateUser(username, password)) {
                // Authorize the user
                string userRole = authenticator.authorizeUser(username);
                if (!userRole.empty()) {
                    cout << "User role: " << userRole << endl;
                } else {
                    cout << "Failed to authorize user." << endl;
                }
            }
            break;

        default:
            cout << "Invalid choice. Please choose again." << endl;
            break;
    }

    return 0;
}